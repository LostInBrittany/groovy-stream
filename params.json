{"name":"groovy-stream","body":"# A Lazy Groovy Generator.\r\n\r\n- Scroll down to see what's new.\r\n\r\n## What is this?\r\n\r\n`groovy-stream` is a collection of classes which allow you to create a lazy-generator in Groovy.\r\n\r\nYou can declare the input from which the Stream will generate its values, and then declare a filter and transformation for each element returned if required.\r\n\r\nTo see examples, have a look in the [`src/test/groovy/groovy/stream` folder](https://github.com/timyates/groovy-stream/tree/master/src/test/groovy/groovy/stream), but in a nutshell, this class lets you do stuff like:\r\n\r\n```groovy\r\nStream s = Stream.from x:1..2, y:1..4 where { x + y == 4 }\r\n\r\nassert s.collect() == [ [ x:1, y:3 ], [ x:2, y:2 ] ]\r\n```\r\n\r\nor\r\n\r\n```groovy\r\nStream s = Stream.from 1..10 transform { it + x++ } where { it % 2 } using x:0\r\n\r\nassert s.collect() == [ 1, 4, 7, 10, 13 ]\r\n```\r\n\r\n```groovy\r\n// Odd example but showing all of the features\r\n\r\nStream.from { 1..max } transform { -it } where { it >= min } using min:3, max:5\r\n\r\nassert s.collect() == [ -3, -4, -5 ]\r\n```\r\n\r\nThere is a [blog post here](http://blog.bloidonia.com/post/22117894718/groovy-stream-a-lazy-generator-and-list-comprehension) explaining the state of groovy-stream v0.1 and it's usage\r\n\r\n---\r\n## What's new\r\n\r\n### v0.4\r\n\r\nYou can now use arrays as a source for groovy-streams.  Previously, running:\r\n\r\n```groovy\r\nint[] arr = [ 1,2,3 ]\r\nStream s = Stream.from arr\r\ns.each { println it }\r\n```\r\n\r\nWould be an infinite loop, returning `[1,2,3]` every time.\r\n\r\nThis will now behave as expected.\r\n\r\n### v0.3\r\n\r\ngroovy-stream can now be used as a Module Extension with Groovy 2.0\r\n\r\nThis means you can do:\r\n\r\n```groovy\r\nStream s = [1,2,3].toStream()\r\n```\r\n\r\nJust by including the built jar on your classpath. It works with `@Grab` too:\r\n\r\n```groovy\r\n@GrabResolver( name='bloidonia', root='https://raw.github.com/timyates/bloidonia-repo/master' )\r\n@Grab('com.bloidonia:groovy-stream:0.3')\r\nimport groovy.stream.Stream \r\n\r\ndef s = (1..4).toStream()\r\nassert [1,2,3,4] == s.collect()\r\n```\r\n\r\nSee [groovy.stream.StreamExtension](https://github.com/timyates/groovy-stream/blob/master/src/main/groovy/groovy/stream/StreamExtension.java) for the decorated classes.\r\n\r\n> Currently (as of Groovy 2.0RC4) there are issues with using `@Grab` -- (see [GROOVY-5543](https://jira.codehaus.org/browse/GROOVY-5543) but this should work fine where the jar is added to the classpath by hand.\r\n\r\n### v0.2\r\n\r\nWhen Streaming over a Map, it is now passed as a parameter to the `where` block so you can deal with shadowed variables, ie:\r\n\r\n```groovy\r\ndef x = 10\r\n\r\ndef bad = Stream.from x:1..3, y:1..3 where { x == y }\r\nassert bad.collect() == [] // as 'x' in the where block == 10\r\n\r\ndef good = Stream.from x:1..3, y:1..3 where { it.x == it.y }\r\nassert good.collect() == [ [x:1,y:1],[x:2,y:2],[x:3,y:3] ]\r\n```\r\n\r\n### v0.1\r\n\r\nInitial release.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A collection of classes to give a fluent builder for Streams (Lazy Groovy Generators)","google":"UA-32866444-1"}